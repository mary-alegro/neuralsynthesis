import glob
import cv2
import argparse
import os

DEFAULT_W = 256
DEFAULT_H = 256

def create_video(args):

    results_dir = args.resultsroot
    output_dir = args.outputdir
    H = args.height
    W = args.width
    fps = args.fps

    folders = glob.glob(os.path.join(results_dir,'**/'))
    folders.sort()
    isFirst = True
    video_files = {}

    print('Parsing folders...')
    for folder in folders:
        print('Parsing {}'.format(folder))
        basename = os.path.basename(os.path.normpath(folder))
        epoch = basename.split('_')[1]
        images = glob.glob(os.path.join(folder,'*_fake_B.png')) #get all images generated by the GAN generator

        for im in images:
            im_basename = os.path.basename(im)
            img_id = im_basename.split('_fake_B')[0]
            if isFirst:
                video_files[img_id] = []
                video_files[img_id].append(im)
            else:
                if img_id in video_files:
                    video_files[img_id].append(im)
                else:
                    print('Warning: epoch {} missing for file {}'.format(epoch,im))

        isFirst = False

    print('Saving videos...')
    for key in video_files.keys(): #each keys is a different scene
        files = video_files[key]
        output_file = os.path.join(output_dir,key+'_results.avi')

        print('Saving {}'.format(output_file))

        img_array = []
        out = cv2.VideoWriter(output_file, cv2.VideoWriter_fourcc(*'MJPG'), fps, (W,H))
        for f in files:
            img = cv2.imread(f)
            if H != DEFAULT_H or W != DEFAULT_W:
                img = cv2.resize(img, (W,H), interpolation=cv2.INTER_CUBIC)
            img_array.append(img)

        for i in range(len(img_array)):
            out.write(img_array[i])
        out.release()



if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("resultsroot", type=str,
                        help="full path to directory with all results")
    parser.add_argument("outputdir", type=str,
                        help="full path to output dir for video file (.avi)")
    parser.add_argument("--height", type=int, default=DEFAULT_H,
                        help="output height")
    parser.add_argument("--width", type=int, default=DEFAULT_W,
                        help="output width")
    parser.add_argument("--fps", type=int, default=15,
                        help="output width")

    args = parser.parse_args()
    create_video(args)